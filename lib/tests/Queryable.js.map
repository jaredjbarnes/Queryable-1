{"version":3,"sources":["../../src/tests/Queryable.js"],"names":["assert","exports","queryable","Queryable","ok","where","expBuilder","property","isEqualTo","query","getQuery","equal","children","nodeName","value","and","or","expressionBuilder","ExpressionBuilder","expression","throws","orderBy","type","column","length","take","skip","orderByDesc","queryable1","queryable2","merge","provider","toArrayAsync","Promise","resolve","then","countAsync","toArrayWithCountAsync","copiedQueryable","copy","deepEqual","posts","members","select","isIn","one","two","json","toJson","fromJson","json2","innerQueryable","Date"],"mappings":"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","file":"Queryable.js","sourcesContent":["import * as assert from \"assert\";\nimport Queryable from \"./../Queryable\";\nimport ExpressionBuilder from \"../ExpressionBuilder\";\n\nexports[\"Queryable: Constructor.\"] = function () {\n    const queryable = new Queryable();\n    assert.ok(true);\n};\n\nexports[\"Queryable: Constructor with query (where: single)\"] = function () {\n    let queryable = new Queryable();\n    queryable = queryable.where(expBuilder => {\n        return expBuilder.property(\"firstName\").isEqualTo(\"Jared\");\n    });\n\n    const query = queryable.getQuery();\n\n    assert.equal(\"isEqualTo\", query.where.children[0].nodeName);\n    assert.equal(\"firstName\", query.where.children[0].children[0].children[1].value);\n    assert.equal(\"Jared\", query.where.children[0].children[1].value);\n};\n\nexports[\"Queryable: Constructor with query (where: chain)\"] = function () {\n    let queryable = new Queryable();\n    queryable = queryable\n        .where(expBuilder => {\n            return expBuilder.property(\"firstName\").isEqualTo(\"Jared\");\n        })\n        .where(expBuilder => {\n            return expBuilder.property(\"lastName\").isEqualTo(\"Barnes\");\n        });\n\n    const query = queryable.getQuery();\n\n    assert.equal(\"and\", query.where.children[0].nodeName);\n    assert.equal(\"isEqualTo\", query.where.children[0].children[0].nodeName);\n    assert.equal(\"firstName\", query.where.children[0].children[0].children[0].children[1].value);\n    assert.equal(\"Jared\", query.where.children[0].children[0].children[1].value);\n    assert.equal(\"isEqualTo\", query.where.children[0].children[1].nodeName);\n    assert.equal(\"lastName\", query.where.children[0].children[1].children[0].children[1].value);\n    assert.equal(\"Barnes\", query.where.children[0].children[1].children[1].value);\n};\n\nexports[\"Queryable: Constructor with query (where: expressionBuilder.and)\"] = function () {\n    let queryable = new Queryable();\n    queryable = queryable\n        .where(expBuilder => {\n            return expBuilder.and(\n                expBuilder.property(\"firstName\").isEqualTo(\"Jared\"),\n                expBuilder.property(\"lastName\").isEqualTo(\"Barnes\"));\n        });\n\n    const query = queryable.getQuery();\n\n    assert.equal(\"and\", query.where.children[0].nodeName);\n    assert.equal(\"isEqualTo\", query.where.children[0].children[0].nodeName);\n    assert.equal(\"firstName\", query.where.children[0].children[0].children[0].children[1].value);\n    assert.equal(\"Jared\", query.where.children[0].children[0].children[1].value);\n    assert.equal(\"isEqualTo\", query.where.children[0].children[1].nodeName);\n    assert.equal(\"lastName\", query.where.children[0].children[1].children[0].children[1].value);\n    assert.equal(\"Barnes\", query.where.children[0].children[1].children[1].value);\n}\n\nexports[\"Queryable: Constructor with query (where: expressionBuilder.or)\"] = function () {\n    let queryable = new Queryable();\n    queryable = queryable\n        .where(expBuilder => {\n            return expBuilder.or(\n                expBuilder.property(\"firstName\").isEqualTo(\"Jared\"),\n                expBuilder.property(\"lastName\").isEqualTo(\"Barnes\"));\n        });\n\n    const query = queryable.getQuery();\n\n    assert.equal(\"or\", query.where.children[0].nodeName);\n    assert.equal(\"isEqualTo\", query.where.children[0].children[0].nodeName);\n    assert.equal(\"firstName\", query.where.children[0].children[0].children[0].children[1].value);\n    assert.equal(\"Jared\", query.where.children[0].children[0].children[1].value);\n    assert.equal(\"isEqualTo\", query.where.children[0].children[1].nodeName);\n    assert.equal(\"lastName\", query.where.children[0].children[1].children[0].children[1].value);\n    assert.equal(\"Barnes\", query.where.children[0].children[1].children[1].value);\n}\n\nexports[\"Queryable: Constructor with query (where: with ExpressionBuilder instance.)\"] = function () {\n    const expressionBuilder = new ExpressionBuilder();\n    const expression = expressionBuilder.property(\"firstName\").isEqualTo(\"Jared\");\n    let queryable = new Queryable();\n    queryable = queryable.where(expression);\n\n    const query = queryable.getQuery();\n\n    assert.equal(\"isEqualTo\", query.where.children[0].nodeName);\n    assert.equal(\"firstName\", query.where.children[0].children[0].children[1].value);\n    assert.equal(\"Jared\", query.where.children[0].children[1].value);\n};\n\nexports[\"Queryable: Constructor with query (where: w/o lambda or ExpressionBuilder instance)\"] = function () {\n    let queryable = new Queryable();\n\n    assert.throws(() => {\n        queryable = queryable.where();\n    });\n};\n\nexports[\"Queryable: Constructor with query (orderBy: single)\"] = function () {\n    let queryable = new Queryable();\n    queryable = queryable.orderBy(\"firstName\");\n\n    const query = queryable.getQuery();\n\n    assert.equal(\"ASC\", query.orderBy[0].type);\n    assert.equal(\"firstName\", query.orderBy[0].column);\n};\n\nexports[\"Queryable: Constructor with query (orderBy: chain)\"] = function () {\n    let queryable = new Queryable();\n    queryable = queryable\n        .orderBy(\"firstName\")\n        .orderBy(\"lastName\");\n\n    const query = queryable.getQuery();\n\n    assert.equal(\"ASC\", query.orderBy[0].type);\n    assert.equal(\"firstName\", query.orderBy[0].column);\n    assert.equal(\"ASC\", query.orderBy[1].type);\n    assert.equal(\"lastName\", query.orderBy[1].column);\n};\n\nexports[\"Queryable: Constructor with query (orderBy: with ExpressionBuilder instance.)\"] = function () {\n    const expressionBuilder = new ExpressionBuilder();\n    let queryable = new Queryable();\n    queryable = queryable.orderBy(\"firstName\");\n\n    const query = queryable.getQuery();\n\n    assert.equal(\"ASC\", query.orderBy[0].type);\n    assert.equal(\"firstName\", query.orderBy[0].column);\n};\n\nexports[\"Queryable: Constructor with query (orderBy: with the same expression called twice.)\"] = function () {\n    let queryable = new Queryable();\n    queryable = queryable\n        .orderBy(\"firstName\")\n        .orderBy(\"firstName\");\n\n    const query = queryable.getQuery();\n\n    assert.equal(1, query.orderBy.length);\n};\n\nexports[\"Queryable: Constructor with query (orderBy: w/o lambda or ExpressionBuilder instance)\"] = function () {\n    let queryable = new Queryable();\n\n    assert.throws(() => {\n        queryable = queryable.orderBy();\n    });\n};\n\nexports[\"Queryable: Constructor with query (take: value === number)\"] = function () {\n    let queryable = new Queryable();\n    queryable = queryable.take(10);\n\n    const query = queryable.getQuery();\n\n    assert.equal(10, query.take);\n};\n\nexports[\"Queryable: Constructor with query (take: value !== number)\"] = function () {\n    let queryable = new Queryable();\n    assert.throws(() => {\n        queryable = queryable.take();\n    });\n};\n\nexports[\"Queryable: Constructor with query (skip: value === number)\"] = function () {\n    let queryable = new Queryable();\n    queryable = queryable.skip(10);\n\n    const query = queryable.getQuery();\n\n    assert.equal(10, query.skip);\n};\n\nexports[\"Queryable: Constructor with query (skip: value !== number)\"] = function () {\n    let queryable = new Queryable();\n    assert.throws(() => {\n        queryable = queryable.skip();\n    });\n};\n\nexports[\"Queryable: Constructor with query (or: single)\"] = function () {\n    let queryable = new Queryable();\n    queryable = queryable.or(expBuilder => {\n        return expBuilder.property(\"firstName\").isEqualTo(\"Jared\");\n    });\n\n    const query = queryable.getQuery();\n\n    assert.equal(\"isEqualTo\", query.where.children[0].nodeName);\n    assert.equal(\"firstName\", query.where.children[0].children[0].children[1].value);\n    assert.equal(\"Jared\", query.where.children[0].children[1].value);\n};\n\nexports[\"Queryable: Constructor with query (or: chain)\"] = function () {\n    let queryable = new Queryable();\n    queryable = queryable\n        .or(expBuilder => {\n            return expBuilder.property(\"firstName\").isEqualTo(\"Jared\");\n        })\n        .or(expBuilder => {\n            return expBuilder.property(\"lastName\").isEqualTo(\"Barnes\");\n        });\n\n    const query = queryable.getQuery();\n\n    assert.equal(\"or\", query.where.children[0].nodeName);\n    assert.equal(\"isEqualTo\", query.where.children[0].children[0].nodeName);\n    assert.equal(\"firstName\", query.where.children[0].children[0].children[0].children[1].value);\n    assert.equal(\"Jared\", query.where.children[0].children[0].children[1].value);\n    assert.equal(\"isEqualTo\", query.where.children[0].children[1].nodeName);\n    assert.equal(\"lastName\", query.where.children[0].children[1].children[0].children[1].value);\n    assert.equal(\"Barnes\", query.where.children[0].children[1].children[1].value);\n};\n\nexports[\"Queryable: Constructor with query (or: with ExpressionBuilder instance.)\"] = function () {\n    const expressionBuilder = new ExpressionBuilder();\n    const expression = expressionBuilder.property(\"firstName\").isEqualTo(\"Jared\");\n    let queryable = new Queryable();\n    queryable = queryable.or(expression);\n\n    const query = queryable.getQuery();\n\n    assert.equal(\"isEqualTo\", query.where.children[0].nodeName);\n    assert.equal(\"firstName\", query.where.children[0].children[0].children[1].value);\n    assert.equal(\"Jared\", query.where.children[0].children[1].value);\n};\n\nexports[\"Queryable: Constructor with query (or: w/o lambda or ExpressionBuilder instance)\"] = function () {\n    let queryable = new Queryable();\n\n    assert.throws(() => {\n        queryable = queryable.or();\n    });\n};\n\nexports[\"Queryable: Constructor with query (and: single)\"] = function () {\n    let queryable = new Queryable();\n    queryable = queryable.and(expBuilder => {\n        return expBuilder.property(\"firstName\").isEqualTo(\"Jared\");\n    });\n\n    const query = queryable.getQuery();\n\n    assert.equal(\"isEqualTo\", query.where.children[0].nodeName);\n    assert.equal(\"firstName\", query.where.children[0].children[0].children[1].value);\n    assert.equal(\"Jared\", query.where.children[0].children[1].value);\n};\n\nexports[\"Queryable: Constructor with query (orderByDesc: single)\"] = function () {\n    let queryable = new Queryable();\n    queryable = queryable.orderByDesc(\"firstName\");\n\n    const query = queryable.getQuery();\n\n    assert.equal(\"DESC\", query.orderBy[0].type);\n    assert.equal(\"firstName\", query.orderBy[0].column);\n};\n\nexports[\"Queryable: Constructor with query (orderByDesc: chain)\"] = function () {\n    let queryable = new Queryable();\n    queryable = queryable\n        .orderByDesc(\"firstName\")\n        .orderByDesc(\"lastName\");\n\n    const query = queryable.getQuery();\n\n    assert.equal(\"DESC\", query.orderBy[0].type);\n    assert.equal(\"firstName\", query.orderBy[0].column);\n    assert.equal(\"DESC\", query.orderBy[1].type);\n    assert.equal(\"lastName\", query.orderBy[1].column);\n};\n\nexports[\"Queryable: Constructor with query (orderByDesc: with ExpressionBuilder instance.)\"] = function () {\n    let queryable = new Queryable();\n    queryable = queryable.orderByDesc(\"firstName\");\n\n    const query = queryable.getQuery();\n\n    assert.equal(\"DESC\", query.orderBy[0].type);\n    assert.equal(\"firstName\", query.orderBy[0].column);\n};\n\nexports[\"Queryable: Constructor with query (orderByDesc: with the same expression called twice.)\"] = function () {\n    let queryable = new Queryable();\n    queryable = queryable\n        .orderByDesc(\"firstName\")\n        .orderByDesc(\"firstName\");\n\n    const query = queryable.getQuery();\n\n    assert.equal(1, query.orderBy.length);\n};\n\nexports[\"Queryable: Constructor with query (orderByDesc: w/o lambda or ExpressionBuilder instance)\"] = function () {\n    let queryable = new Queryable();\n\n    assert.throws(() => {\n        queryable = queryable.orderByDesc();\n    });\n};\n\nexports[\"Queryable: Constructor with query (merge: merging queryable is empty)\"] = function () {\n    let queryable1 = new Queryable();\n    let queryable2 = new Queryable();\n    queryable2 = queryable2.merge(queryable1);\n\n    const query = queryable2.getQuery();\n\n    assert.equal(0, query.where.children.length);\n};\n\nexports[\"Queryable: Constructor with query (merge: queryable merging doesn't have anything to copy)\"] = function () {\n    let queryable1 = new Queryable();\n    let queryable2 = new Queryable();\n\n    queryable1 = queryable1.where(expBuilder => {\n        return expBuilder.property(\"firstName\").isEqualTo(\"Jared\");\n    });\n    queryable2 = queryable2.merge(queryable1);\n\n    const query = queryable2.getQuery();\n\n    assert.equal(\"isEqualTo\", query.where.children[0].nodeName);\n    assert.equal(\"firstName\", query.where.children[0].children[0].children[1].value);\n    assert.equal(\"Jared\", query.where.children[0].children[1].value);\n};\n\nexports[\"Queryable: Constructor with query (merge: queryable merging has a single where expression)\"] = function () {\n    let queryable1 = new Queryable();\n    let queryable2 = new Queryable();\n\n    queryable1 = queryable1.where(expBuilder => {\n        return expBuilder.property(\"firstName\").isEqualTo(\"Jared\");\n    });\n    queryable2 = queryable2\n        .where(expBuilder => {\n            return expBuilder.property(\"lastName\").isEqualTo(\"Barnes\");\n        })\n        .merge(queryable1);\n\n    const query = queryable2.getQuery();\n\n    assert.equal(\"and\", query.where.children[0].nodeName);\n    assert.equal(\"Barnes\", query.where.children[0].children[0].children[1].value);\n    assert.equal(\"Jared\", query.where.children[0].children[1].children[1].value);\n};\n\nexports[\"Queryable: Constructor with query (merge: queryable merging has a chained where expression)\"] = function () {\n    let queryable1 = new Queryable();\n    let queryable2 = new Queryable();\n\n    queryable1 = queryable1.where(expBuilder => {\n        return expBuilder.property(\"firstName\").isEqualTo(\"Jared\");\n    });\n    queryable2 = queryable2\n        .where(expBuilder => {\n            return expBuilder.property(\"lastName\").isEqualTo(\"Barnes\");\n        })\n        .where(expBuilder => {\n            return expBuilder.property(\"age\").isEqualTo(35);\n        })\n        .merge(queryable1);\n\n    const query = queryable2.getQuery();\n\n    assert.equal(\"and\", query.where.children[0].nodeName);\n    assert.equal(\"Barnes\", query.where.children[0].children[0].children[1].value);\n    assert.equal(35, query.where.children[0].children[1].children[1].value);\n    assert.equal(\"Jared\", query.where.children[0].children[2].children[1].value);\n};\n\nexports[\"Queryable: Constructor with query (merge: merging queryable has an orderBy expression)\"] = function () {\n    let queryable1 = new Queryable();\n    let queryable2 = new Queryable();\n\n    queryable1 = queryable1.orderBy(\"firstName\");\n    queryable2 = queryable2.merge(queryable1);\n\n    const query = queryable2.getQuery();\n\n    assert.equal(\"firstName\", query.orderBy[0].column);\n};\n\nexports[\"Queryable: Constructor with query (merge: merging queryable has the same orderBy expression as queryable merging)\"] = function () {\n    let queryable1 = new Queryable();\n    let queryable2 = new Queryable();\n\n    queryable1 = queryable1.orderBy(\"firstName\");\n    queryable2 = queryable2\n        .orderBy(\"firstName\")\n        .merge(queryable1);\n\n    const query = queryable2.getQuery();\n\n    assert.equal(1, query.orderBy.length);\n};\n\nexports[\"Queryable: Constructor with query (merge: w/o a queryable passed in)\"] = function () {\n    let queryable = new Queryable();\n\n    assert.throws(() => {\n        queryable = queryable.merge();\n    });\n};\n\nexports[\"Queryable: Constructor with toArrayAsync called.\"] = function () {\n    let queryable = new Queryable();\n    queryable.provider = { toArrayAsync: () => Promise.resolve([]) };\n\n    queryable.toArrayAsync().then(() => {\n        assert.ok(true);\n    });\n};\n\nexports[\"Queryable: Constructor with toArrayAsync method called w/o provider.\"] = function () {\n    let queryable = new Queryable();\n\n    assert.throws(() => {\n        queryable.toArrayAsync();\n    });\n};\n\nexports[\"Queryable: Constructor with countAsync called.\"] = function () {\n    let queryable = new Queryable();\n    queryable.provider = { countAsync: queryable => Promise.resolve() };\n\n    queryable.countAsync().then(() => {\n        assert.ok(true);\n    });\n};\n\nexports[\"Queryable: Constructor with toArrayWithCountAsync called.\"] = function () {\n    let queryable = new Queryable();\n    queryable.provider = { toArrayWithCountAsync: queryable => Promise.resolve() };\n\n    queryable.toArrayWithCountAsync().then(() => {\n        assert.ok(true);\n    });\n};\n\nexports[\"Queryable: Constructor with copy called.\"] = function () {\n    let queryable = new Queryable();\n    let copiedQueryable = queryable.copy();\n\n    assert.deepEqual(queryable, copiedQueryable);\n};\n\nexports[\"Queryable: IsIn with queryable.\"] = function () {\n    let posts = new Queryable(\"Post\");\n    let members = new Queryable(\"Member\").select([\"groupId\"]).where((expBuilder) => {\n        return expBuilder.property(\"userId\").isEqualTo(\"Bob\");\n    });\n\n    posts = posts.where((expBuilder) => {\n        return expBuilder.property(\"groupId\").isIn(members);\n    });\n\n    assert.equal(posts.query.where.children[0].children[1].value, members.getQuery());\n};\n\nexports[\"Queryable: Select, invalid arguments.\"] = function () {\n    let queryable = new Queryable();\n    assert.throws(() => {\n        queryable.select(\"bad\");\n    });\n};\n\nexports[\"Queryable: Select.\"] = function () {\n    let queryable = new Queryable().select({\n        \"one\": \"otherOne\",\n        \"two\": \"otherTwo\"\n    });\n\n    assert.equal(queryable.query.select.one, \"otherOne\");\n    assert.equal(queryable.query.select.two, \"otherTwo\");\n};\n\nexports[\"Queryable.toJson: Simple.\"] = function () {\n    let queryable = new Queryable(\"Source\").where((expBuilder) => {\n        return expBuilder.property(\"property\").isEqualTo(\"Value\");\n    });\n\n    let json = queryable.toJson();\n    let queryable2 = Queryable.fromJson(json);\n    let json2 = queryable2.toJson();\n\n    assert.equal(json, json2);\n}\n\nexports[\"Queryable.toJson: isIn with query.\"] = function () {\n    let innerQueryable = new Queryable(\"Target\").select([\"sourceId\"]).where((expBuilder) => {\n        return expBuilder.property(\"property\").isEqualTo(\"John\");\n    });\n\n    let queryable = new Queryable(\"Source\").select({\n        \"property1\": \"prop1\"\n    }).where((expBuilder) => {\n        return expBuilder.property(\"property\").isIn(innerQueryable);\n    }).orderBy(\"property1\").take(10).skip(15);\n\n    let json = queryable.toJson();\n    let queryable2 = Queryable.fromJson(json);\n    let json2 = queryable2.toJson();\n\n    assert.equal(json, json2);\n}\n\n\nexports[\"Queryable: Check date is still date when refining queryable.\"] = function () {\n    let queryable = new Queryable(\"Target\").where((expBuilder) => {\n        return expBuilder.property(\"property\").isEqualTo(new Date(1970, 1, 1));\n    }).select([\"sourceId\"]);\n\n}"]}