{"version":3,"sources":["../../src/tests/ExpressionBuilder.js"],"names":["assert","exports","expressionBuilder","ExpressionBuilder","ok","expression","and","equal","nodeName","or","value","property","isEqualTo","children","isNotEqualTo","contains","testArray","isIn","deepEqual","throws","isNotIn","isGreaterThan","isGreaterThanOrEqualTo","isLessThan","isLessThanOrEqualTo","endsWith","startsWith"],"mappings":"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","file":"ExpressionBuilder.js","sourcesContent":["import * as assert from \"assert\";\nimport OperationExpression from \"./../OperationExpression\";\nimport ExpressionBuilder from \"./../ExpressionBuilder\";\nimport OperationExpressionBuilder from \"./../OperationExpressionBuilder\";\n\nexports[\"ExpressionBuilder: Constructor.\"] = function () {\n    const expressionBuilder = new ExpressionBuilder();\n    assert.ok(true);\n};\n\nexports[\"ExpressionBuilder: Constructor with and.\"] = function () {\n    const expressionBuilder = new ExpressionBuilder();\n    const expression = expressionBuilder.and();\n\n    assert.equal(\"and\", expression.nodeName);\n};\n\nexports[\"ExpressionBuilder: Constructor with or.\"] = function () {\n    const expressionBuilder = new ExpressionBuilder();\n    const expression = expressionBuilder.or();\n\n    assert.equal(\"or\", expression.nodeName);\n};\n\nexports[\"ExpressionBuilder: Constructor with value.\"] = function () {\n    const expressionBuilder = new ExpressionBuilder();\n    const value = expressionBuilder.value();\n    assert.ok(true);\n};\n\nexports[\"ExpressionBuilder: Constructor with expression (isEqualTo).\"] = function () {\n    const expressionBuilder = new ExpressionBuilder();\n    const expression = expressionBuilder.property(\"firstName\").isEqualTo(\"Jared\");\n\n    assert.equal(\"isEqualTo\", expression.children[0].nodeName);\n    assert.equal(\"firstName\", expression.children[0].children[0].children[1].value);\n    assert.equal(\"Jared\", expression.children[0].children[1].value);\n};\n\nexports[\"ExpressionBuilder: Constructor with expression (isNotEqualTo).\"] = function () {\n    const expressionBuilder = new ExpressionBuilder();\n    const expression = expressionBuilder.property(\"firstName\").isNotEqualTo(\"Jared\");\n\n    assert.equal(\"isNotEqualTo\", expression.children[0].nodeName);\n    assert.equal(\"firstName\", expression.children[0].children[0].children[1].value);\n    assert.equal(\"Jared\", expression.children[0].children[1].value);\n};\n\nexports[\"ExpressionBuilder: Constructor with expression (contains).\"] = function () {\n    const expressionBuilder = new ExpressionBuilder();\n    const expression = expressionBuilder.property(\"firstName\").contains(\"Jared\");\n\n    assert.equal(\"contains\", expression.children[0].nodeName);\n    assert.equal(\"firstName\", expression.children[0].children[0].children[1].value);\n    assert.equal(\"Jared\", expression.children[0].children[1].value);\n};\n\nexports[\"ExpressionBuilder: Constructor with expression (isIn).\"] = function () {\n    const expressionBuilder = new ExpressionBuilder();\n    const testArray = [\"test\"];\n    const expression = expressionBuilder.property(\"firstName\").isIn(testArray);\n\n    assert.equal(\"isIn\", expression.children[0].nodeName);\n    assert.equal(\"firstName\", expression.children[0].children[0].children[1].value);\n    assert.deepEqual(testArray, expression.children[0].children[1].value);\n};\n\nexports[\"ExpressionBuilder: Constructor with expression (isIn: w/o passing in Array).\"] = function () {\n    const expressionBuilder = new ExpressionBuilder();\n\n    assert.throws(() => {\n        expressionBuilder.property(\"firstName\").isIn(\"test\");\n    });\n};\n\nexports[\"ExpressionBuilder: Constructor with expression (isNotIn).\"] = function () {\n    const expressionBuilder = new ExpressionBuilder();\n    const testArray = [\"test\"];\n    const expression = expressionBuilder.property(\"firstName\").isNotIn(testArray);\n\n    assert.equal(\"isNotIn\", expression.children[0].nodeName);\n    assert.equal(\"firstName\", expression.children[0].children[0].children[1].value);\n    assert.deepEqual(testArray, expression.children[0].children[1].value);\n};\n\nexports[\"ExpressionBuilder: Constructor with expression (isNotIn: w/o passing in Array).\"] = function () {\n    const expressionBuilder = new ExpressionBuilder();\n\n    assert.throws(() => {\n        expressionBuilder.property(\"firstName\").isNotIn(\"test\");\n    });\n};\n\nexports[\"ExpressionBuilder: Constructor with expression (isGreaterThan).\"] = function () {\n    const expressionBuilder = new ExpressionBuilder();\n    const expression = expressionBuilder.property(\"firstName\").isGreaterThan(\"Jared\");\n\n    assert.equal(\"isGreaterThan\", expression.children[0].nodeName);\n    assert.equal(\"firstName\", expression.children[0].children[0].children[1].value);\n    assert.equal(\"Jared\", expression.children[0].children[1].value);\n};\n\nexports[\"ExpressionBuilder: Constructor with expression (isGreaterThanOrEqualTo).\"] = function () {\n    const expressionBuilder = new ExpressionBuilder();\n    const expression = expressionBuilder.property(\"firstName\").isGreaterThanOrEqualTo(\"Jared\");\n\n    assert.equal(\"isGreaterThanOrEqualTo\", expression.children[0].nodeName);\n    assert.equal(\"firstName\", expression.children[0].children[0].children[1].value);\n    assert.equal(\"Jared\", expression.children[0].children[1].value);\n};\n\nexports[\"ExpressionBuilder: Constructor with expression (isLessThan).\"] = function () {\n    const expressionBuilder = new ExpressionBuilder();\n    const expression = expressionBuilder.property(\"firstName\").isLessThan(\"Jared\");\n\n    assert.equal(\"isLessThan\", expression.children[0].nodeName);\n    assert.equal(\"firstName\", expression.children[0].children[0].children[1].value);\n    assert.equal(\"Jared\", expression.children[0].children[1].value);\n};\n\nexports[\"ExpressionBuilder: Constructor with expression (isLessThanOrEqualTo).\"] = function () {\n    const expressionBuilder = new ExpressionBuilder();\n    const expression = expressionBuilder.property(\"firstName\").isLessThanOrEqualTo(\"Jared\");\n\n    assert.equal(\"isLessThanOrEqualTo\", expression.children[0].nodeName);\n    assert.equal(\"firstName\", expression.children[0].children[0].children[1].value);\n    assert.equal(\"Jared\", expression.children[0].children[1].value);\n};\n\nexports[\"ExpressionBuilder: Constructor with expression (endsWith).\"] = function () {\n    const expressionBuilder = new ExpressionBuilder();\n    const expression = expressionBuilder.property(\"firstName\").endsWith(\"Jared\");\n\n    assert.equal(\"endsWith\", expression.children[0].nodeName);\n    assert.equal(\"firstName\", expression.children[0].children[0].children[1].value);\n    assert.equal(\"Jared\", expression.children[0].children[1].value);\n};\n\nexports[\"ExpressionBuilder: Constructor with expression (startsWith).\"] = function () {\n    const expressionBuilder = new ExpressionBuilder();\n    const expression = expressionBuilder.property(\"firstName\").startsWith(\"Jared\");\n\n    assert.equal(\"startsWith\", expression.children[0].nodeName);\n    assert.equal(\"firstName\", expression.children[0].children[0].children[1].value);\n    assert.equal(\"Jared\", expression.children[0].children[1].value);\n};"]}