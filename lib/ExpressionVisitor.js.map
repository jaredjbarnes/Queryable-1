{"version":3,"sources":["../src/ExpressionVisitor.js"],"names":["ExpressionVisitor","expression","children","forEach","push","parse","func","nodeName","Error","child","index","Expression","call","apply"],"mappings":";;;;;;;;AAAA;;;;;;;;IAEqBA,iB;;;;;;;8BAEXC,U,EAAY;AAAA;;AACd,gBAAIC,WAAW,EAAf;;AAEA,gBAAID,cAAc,IAAlB,EAAwB;AACpB,uBAAO,IAAP;AACH;;AAEDA,uBAAWC,QAAX,CAAoBC,OAApB,CAA4B,UAACF,UAAD,EAAgB;AACxC,oBAAI,CAACA,WAAWC,QAAhB,EAA0B;AACtBA,6BAASE,IAAT,CAAcH,UAAd;AACH,iBAFD,MAEO;AACHC,6BAASE,IAAT,CAAc,MAAKC,KAAL,CAAWJ,UAAX,CAAd;AACH;AACJ,aAND;;AAQA,gBAAIK,OAAO,KAAKL,WAAWM,QAAhB,CAAX;;AAEA,gBAAI,CAACD,IAAL,EAAW;AACP,sBAAM,IAAIE,KAAJ,CAAU,uCAAuCP,WAAWM,QAAlD,GAA6D,gBAAvE,CAAN;AACH;;AAEDL,qBAASC,OAAT,CAAiB,UAACM,KAAD,EAAQC,KAAR,EAAkB;AAC/B,oBAAID,iBAAiBE,oBAArB,EAAiC;AAC7B,wBAAIL,OAAO,MAAKG,MAAMF,QAAX,CAAX;AACA,wBAAI,CAACD,IAAL,EAAW;AACP,8BAAM,IAAIE,KAAJ,CAAU,uCAAuCC,MAAMF,QAA7C,GAAwD,gBAAlE,CAAN;AACH;AACDL,6BAASQ,KAAT,IAAkBJ,KAAKM,IAAL,CAAU,KAAV,EAAgBH,KAAhB,CAAlB;AACH;AACJ,aARD;;AAUA,mBAAOH,KAAKO,KAAL,CAAW,IAAX,EAAiBX,QAAjB,CAAP;AACH;;;;;;kBAlCgBF,iB","file":"ExpressionVisitor.js","sourcesContent":["import Expression from \"./Expression\";\n\nexport default class ExpressionVisitor {\n\n    parse(expression) {\n        let children = [];\n\n        if (expression == null) {\n            return null;\n        }\n\n        expression.children.forEach((expression) => {\n            if (!expression.children) {\n                children.push(expression);\n            } else {\n                children.push(this.parse(expression));\n            }\n        });\n\n        let func = this[expression.nodeName];\n\n        if (!func) {\n            throw new Error(\"The builder doesn't support the \\\"\" + expression.nodeName + \"\\\" expression.\");\n        }\n\n        children.forEach((child, index) => {\n            if (child instanceof Expression) {\n                var func = this[child.nodeName];\n                if (!func) {\n                    throw new Error(\"The builder doesn't support the \\\"\" + child.nodeName + \"\\\" expression.\");\n                }\n                children[index] = func.call(this, child);\n            }\n        });\n\n        return func.apply(this, children);\n    }\n\n}\n"]}