{"version":3,"sources":["../src/OperationExpression.js"],"names":["OperationExpression","nodeName","children","copy","forEach","push","expression","Array","isArray","node","length","every","index","isEqualTo","matched","childNode","contains","some","matchedNodes","getMatchingNodes","Expression"],"mappings":";;;;;;;;AAAA;;;;;;;;;;;;IAEqBA,mB;;;AACjB,iCAAYC,QAAZ,EAAsB;AAAA;;AAAA,8IACZ,WADY;;AAElB,cAAKA,QAAL,GAAgBA,QAAhB;AACA,cAAKC,QAAL,GAAgB,EAAhB;AAHkB;AAIrB;;;;+BAEM;AACH,gBAAIA,WAAW,EAAf;AACA,gBAAIC,OAAO,IAAIH,mBAAJ,CAAwB,KAAKC,QAA7B,CAAX;;AAEA,iBAAKC,QAAL,CAAcE,OAAd,CAAsB,sBAAc;AAChCD,qBAAKD,QAAL,CAAcG,IAAd,CAAmBC,WAAWH,IAAX,EAAnB;AACH,aAFD;;AAIA,mBAAOA,IAAP;AACH;;;oCAEW;AACR,gBAAI,CAACI,MAAMC,OAAN,CAAcC,KAAKP,QAAnB,CAAD,IAAiC,KAAKD,QAAL,KAAkBQ,KAAKR,QAA5D,EAAsE;AAClE,uBAAO,KAAP;AACH;;AAED,gBAAIQ,KAAKP,QAAL,CAAcQ,MAAd,KAAyB,KAAKR,QAAL,CAAcQ,MAA3C,EAAmD;AAC/C,uBAAO,KAAP;AACH;;AAED,mBAAO,KAAKR,QAAL,CAAcS,KAAd,CAAoB,UAACL,UAAD,EAAaM,KAAb,EAAuB;AAC9C,uBAAON,WAAWO,SAAX,CAAqBJ,KAAKP,QAAL,CAAcU,KAAd,CAArB,CAAP;AACH,aAFM,CAAP;AAGH;;;iCAEQH,I,EAAM;AAAA;;AACX,gBAAIA,KAAKR,QAAL,KAAkB,KAAKA,QAAvB,IAAmCM,MAAMC,OAAN,CAAcC,KAAKP,QAAnB,CAAvC,EAAqE;AACjE,oBAAIY,UAAUL,KAAKP,QAAL,CAAcS,KAAd,CAAoB,UAACI,SAAD,EAAYH,KAAZ,EAAsB;AACpD,2BAAOG,UAAUC,QAAV,CAAmB,OAAKd,QAAL,CAAcU,KAAd,CAAnB,CAAP;AACH,iBAFa,CAAd;;AAIA,oBAAIE,OAAJ,EAAa;AACT,2BAAO,IAAP;AACH;AACJ;;AAED,mBAAO,KAAKZ,QAAL,CAAce,IAAd,CAAmB,qBAAa;AACnC,uBAAOF,UAAUC,QAAV,CAAmBP,IAAnB,CAAP;AACH,aAFM,CAAP;AAGH;;;yCAEgBA,I,EAAMS,Y,EAAc;AAAA;;AACjCA,2BAAeX,MAAMC,OAAN,CAAcU,YAAd,IAA8BA,YAA9B,GAA6C,EAA5D;;AAEA,gBAAIT,KAAKR,QAAL,KAAkB,KAAKA,QAAvB,IAAmCM,MAAMC,OAAN,CAAcC,KAAKP,QAAnB,CAAvC,EAAqE;AACjE,oBAAIY,UAAUL,KAAKP,QAAL,CAAcS,KAAd,CAAoB,UAACI,SAAD,EAAYH,KAAZ,EAAsB;AACpD,2BAAOG,UAAUC,QAAV,CAAmB,OAAKd,QAAL,CAAcU,KAAd,CAAnB,EAAyCM,YAAzC,CAAP;AACH,iBAFa,CAAd;;AAIA,oBAAIJ,OAAJ,EAAa;AACTI,iCAAab,IAAb,CAAkB,IAAlB;AACH;AACJ;;AAED,iBAAKH,QAAL,CAAcE,OAAd,CAAsB,qBAAa;AAC/B,oBAAIG,MAAMC,OAAN,CAAcO,UAAUb,QAAxB,CAAJ,EAAuC;AACnCa,8BAAUI,gBAAV,CAA2BV,IAA3B,EAAiCS,YAAjC;AACH,iBAFD,MAEO,IAAIH,UAAUd,QAAV,KAAuBQ,KAAKR,QAAhC,EAA0C;AAC7CiB,iCAAab,IAAb,CAAkBU,SAAlB;AACH;AACJ,aAND,EAMGG,YANH;;AAQA,mBAAOA,YAAP;AACH;;;;EAtE4CE,oB;;kBAA5BpB,mB","file":"OperationExpression.js","sourcesContent":["import Expression from \"./Expression\";\n\nexport default class OperationExpression extends Expression {\n    constructor(nodeName) {\n        super(\"operation\");\n        this.nodeName = nodeName;\n        this.children = [];\n    }\n\n    copy() {\n        var children = [];\n        var copy = new OperationExpression(this.nodeName);\n\n        this.children.forEach(expression => {\n            copy.children.push(expression.copy());\n        });\n\n        return copy;\n    }\n\n    isEqualTo() {\n        if (!Array.isArray(node.children) || this.nodeName !== node.nodeName) {\n            return false;\n        }\n\n        if (node.children.length !== this.children.length) {\n            return false;\n        }\n\n        return this.children.every((expression, index) => {\n            return expression.isEqualTo(node.children[index]);\n        });\n    }\n\n    contains(node) {\n        if (node.nodeName === this.nodeName && Array.isArray(node.children)) {\n            var matched = node.children.every((childNode, index) => {\n                return childNode.contains(this.children[index]);\n            });\n\n            if (matched) {\n                return true;\n            }\n        }\n\n        return this.children.some(childNode => {\n            return childNode.contains(node);\n        });\n    }\n\n    getMatchingNodes(node, matchedNodes) {\n        matchedNodes = Array.isArray(matchedNodes) ? matchedNodes : [];\n\n        if (node.nodeName === this.nodeName && Array.isArray(node.children)) {\n            var matched = node.children.every((childNode, index) => {\n                return childNode.contains(this.children[index], matchedNodes);\n            });\n\n            if (matched) {\n                matchedNodes.push(this);\n            }\n        }\n\n        this.children.forEach(childNode => {\n            if (Array.isArray(childNode.children)) {\n                childNode.getMatchingNodes(node, matchedNodes);\n            } else if (childNode.nodeName === node.nodeName) {\n                matchedNodes.push(childNode);\n            }\n        }, matchedNodes);\n\n        return matchedNodes;\n    }\n\n}"]}