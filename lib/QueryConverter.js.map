{"version":3,"sources":["../src/QueryConverter.js"],"names":["QueryBuilder","node","type","nodeName","value","where","_convertNode","ValueExpression","operationExpression","OperationExpression","Array","isArray","children","Error","forEach","childNode","expression","push","json","object","JSON","parse","convertObject","Object","keys","reduce","query","key","convertJson"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;;;;;IAEqBA,Y;;;;;;;qCACJC,I,EAAM;AAAA;;AACf,gBAAIA,QAAQ,IAAZ,EAAkB;AACd,uBAAOA,IAAP;AACH;;AAED,gBAAIA,KAAKC,IAAL,KAAc,OAAlB,EAA2B;;AAEvB,oBAAID,KAAKE,QAAL,KAAkB,WAAtB,EAAmC;AAC/BF,yBAAKG,KAAL,CAAWC,KAAX,GAAmB,KAAKC,YAAL,CAAkBL,KAAKG,KAAL,CAAWC,KAA7B,CAAnB;AACA,2BAAO,IAAIE,yBAAJ,CAAoBN,KAAKE,QAAzB,EAAmCF,KAAKG,KAAxC,CAAP;AACH,iBAHD,MAGO;AACH,2BAAO,IAAIG,yBAAJ,CAAoBN,KAAKE,QAAzB,EAAmCF,KAAKG,KAAxC,CAAP;AACH;AAEJ,aATD,MASO,IAAIH,KAAKC,IAAL,KAAc,WAAlB,EAA+B;AAClC,oBAAIM,sBAAsB,IAAIC,6BAAJ,CAAwBR,KAAKE,QAA7B,CAA1B;;AAEA,oBAAI,CAACO,MAAMC,OAAN,CAAcV,KAAKW,QAAnB,CAAL,EAAmC;AAC/B,0BAAM,IAAIC,KAAJ,CAAU,8EAAV,CAAN;AACH;;AAEDZ,qBAAKW,QAAL,CAAcE,OAAd,CAAsB,UAACC,SAAD,EAAe;AACjC,wBAAIC,aAAa,MAAKV,YAAL,CAAkBS,SAAlB,CAAjB;AACAP,wCAAoBI,QAApB,CAA6BK,IAA7B,CAAkCD,UAAlC;AACH,iBAHD;;AAKA,uBAAOR,mBAAP;AACH,aAbM,MAaA,IAAIP,KAAKC,IAAL,IAAa,IAAjB,EAAuB;AAC1B,uBAAOD,IAAP;AACH;AACJ;;;oCAEWiB,I,EAAM;AACd,gBAAIC,SAASC,KAAKC,KAAL,CAAWH,IAAX,CAAb;AACA,mBAAO,KAAKI,aAAL,CAAmBH,MAAnB,CAAP;AACH;;;sCAEaA,M,EAAQ;AAAA;;AAClB,mBAAOI,OAAOC,IAAP,CAAYL,MAAZ,EAAoBM,MAApB,CAA2B,UAACC,KAAD,EAAQC,GAAR,EAAgB;AAC9CD,sBAAMC,GAAN,IAAa,OAAKrB,YAAL,CAAkBa,OAAOQ,GAAP,CAAlB,CAAb;AACA,uBAAOD,KAAP;AACH,aAHM,EAGJ,EAHI,CAAP;AAIH;;;gCAEOR,I,EAAM;AACV,mBAAO,KAAKU,WAAL,CAAiBV,IAAjB,CAAP;AACH;;;;;;kBA/CgBlB,Y","file":"QueryConverter.js","sourcesContent":["import OperationExpression from \"./OperationExpression\";\nimport ValueExpression from \"./ValueExpression\";\n\nexport default class QueryBuilder {\n    _convertNode(node) {\n        if (node == null) {\n            return node;\n        }\n\n        if (node.type === \"value\") {\n\n            if (node.nodeName === \"queryable\") {\n                node.value.where = this._convertNode(node.value.where);\n                return new ValueExpression(node.nodeName, node.value);\n            } else {\n                return new ValueExpression(node.nodeName, node.value);\n            }\n\n        } else if (node.type === \"operation\") {\n            let operationExpression = new OperationExpression(node.nodeName);\n\n            if (!Array.isArray(node.children)) {\n                throw new Error(\"Invalid Operation Node. It didn't contain a children property of type array.\");\n            }\n\n            node.children.forEach((childNode) => {\n                let expression = this._convertNode(childNode);\n                operationExpression.children.push(expression);\n            });\n\n            return operationExpression;\n        } else if (node.type == null) {\n            return node;\n        }\n    }\n\n    convertJson(json) {\n        let object = JSON.parse(json);\n        return this.convertObject(object);\n    }\n\n    convertObject(object) {\n        return Object.keys(object).reduce((query, key) => {\n            query[key] = this._convertNode(object[key]);\n            return query;\n        }, {});\n    }\n\n    convert(json) {\n        return this.convertJson(json);\n    }\n}"]}