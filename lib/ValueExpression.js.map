{"version":3,"sources":["../src/ValueExpression.js"],"names":["ValueExpression","nodeName","value","obj","clone","Date","_isObject","Array","isArray","Object","keys","forEach","key","_cloneObject","node","isEqualTo","Expression"],"mappings":";;;;;;;;;;AAAA;;;;;;;;;;;;IAEqBA,e;;;AACjB,6BAAYC,QAAZ,EAAsBC,KAAtB,EAA6B;AAAA;;AAAA,sIACnB,OADmB;;AAEzB,cAAKA,KAAL,GAAaA,KAAb;AACA,cAAKD,QAAL,GAAgBA,QAAhB;AAHyB;AAI5B;;;;qCAEYE,G,EAAK;AAAA;;AACd,gBAAIC,cAAJ;;AAEA,gBAAID,eAAeE,IAAnB,EAAyB;AACrB,uBAAO,IAAIA,IAAJ,CAASF,GAAT,CAAP;AACH,aAFD,MAEO,IAAI,KAAKG,SAAL,CAAeH,GAAf,CAAJ,EAAyB;AAC5BC,wBAAQ,EAAR;AACH,aAFM,MAEA,IAAIG,MAAMC,OAAN,CAAcL,GAAd,CAAJ,EAAwB;AAC3BC,wBAAQ,EAAR;AACH,aAFM,MAEA;AACH,uBAAOD,GAAP;AACH;;AAEDM,mBAAOC,IAAP,CAAYP,GAAZ,EAAiBQ,OAAjB,CAAyB,UAACC,GAAD,EAAS;AAC9BR,sBAAMQ,GAAN,IAAa,OAAKC,YAAL,CAAkBV,IAAIS,GAAJ,CAAlB,CAAb;AACH,aAFD;;AAIA,mBAAOR,KAAP;AACH;;;+BAEM;AACH,gBAAMF,QAAQ,KAAKW,YAAL,CAAkB,KAAKX,KAAvB,CAAd;;AAEA,mBAAO,IAAIF,eAAJ,CAAoB,KAAKC,QAAzB,EAAmCC,KAAnC,CAAP;AACH;;;kCAESY,I,EAAM;AACZ,gBAAIA,QAAQ,KAAKb,QAAL,KAAkBa,KAAKb,QAA/B,IAA2C,KAAKC,KAAL,KAAeY,KAAKZ,KAAnE,EAA0E;AACtE,uBAAO,IAAP;AACH;AACD,mBAAO,KAAP;AACH;;;kCAESC,G,EAAK;AACX,mBAAO,QAAOA,GAAP,yCAAOA,GAAP,OAAe,QAAf,IAA2BA,OAAO,IAAlC,IAA0C,CAACI,MAAMC,OAAN,CAAcL,GAAd,CAAlD;AACH;;;iCAEQW,I,EAAM;AACX,mBAAO,KAAKC,SAAL,CAAeD,IAAf,CAAP;AACH;;;;EA9CwCE,oB;;kBAAxBhB,e","file":"ValueExpression.js","sourcesContent":["import Expression from \"./Expression\";\n\nexport default class ValueExpression extends Expression {\n    constructor(nodeName, value) {\n        super(\"value\");\n        this.value = value;\n        this.nodeName = nodeName;\n    }\n\n    _cloneObject(obj) {\n        let clone;\n\n        if (obj instanceof Date) {\n            return new Date(obj);\n        } else if (this._isObject(obj)) {\n            clone = {};\n        } else if (Array.isArray(obj)) {\n            clone = [];\n        } else {\n            return obj;\n        }\n\n        Object.keys(obj).forEach((key) => {\n            clone[key] = this._cloneObject(obj[key]);\n        });\n\n        return clone;\n    }\n\n    copy() {\n        const value = this._cloneObject(this.value);\n\n        return new ValueExpression(this.nodeName, value);\n    }\n\n    isEqualTo(node) {\n        if (node && this.nodeName === node.nodeName && this.value === node.value) {\n            return true;\n        }\n        return false;\n    }\n\n    _isObject(obj) {\n        return typeof obj === \"object\" && obj != null && !Array.isArray(obj);\n    }\n\n    contains(node) {\n        return this.isEqualTo(node);\n    }\n}"]}